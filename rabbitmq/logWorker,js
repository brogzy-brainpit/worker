// sentLoggerWorker.js
require("dotenv").config();
const amqp = require('amqplib');
const mongoose = require('mongoose');
const User = require('../model/userAuth'); // Adjust if needed

// üîó MongoDB Connection
const MONGO_URI = process.env.MONGODB_URI;
mongoose.connect(MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

mongoose.connection.on('connected', () => {
  console.log('‚úÖ MongoDB connected (Logger Worker)');
});
mongoose.connection.on('error', (err) => {
  console.error('‚ùå MongoDB connection error:', err);
});

// üì• RabbitMQ Consumer Setup
const RABBITMQ_URL = process.env.AMQP_URL;
const QUEUE_NAME = 'sentLogs';

async function startLoggerWorker() {
  console.log('üõ†Ô∏è Logger Worker starting...');

  try {
    const conn = await amqp.connect(RABBITMQ_URL);
    const channel = await conn.createChannel();
    await channel.assertQueue(QUEUE_NAME, { durable: true });

    console.log(`üì• Waiting for messages in '${QUEUE_NAME}'`);

    channel.consume(
      QUEUE_NAME,
      async (msg) => {
        if (msg !== null) {
          try {
            const content = msg.content.toString();
            const data = JSON.parse(content);
            const { userId, email } = data;
console.log("üì© Received message in Logger Worker:", { userId, email });

            if (!userId || !email) {
              console.warn('‚ö†Ô∏è Missing userId or email in message:', data);
              return channel.ack(msg);
            }

            const result = await User.updateOne(
              { _id: userId, "contacts.email": email },
              { $inc: { "contacts.$.totalEmailSent": 1 } }
            );

            if (result.modifiedCount === 0) {
              console.warn(`‚ö†Ô∏è No contact updated for userId: ${userId}, email: ${email}`);
            } else {
              console.log(`‚úÖ Logged email sent for ${email} (user: ${userId})`);
            }

            channel.ack(msg);
          } catch (err) {
            console.error('‚ùå Failed to process message:', err.message);
            channel.nack(msg, false, false);
          }
        }
      },
      { noAck: false }
    );
  } catch (err) {
    console.error('‚ùå Logger Worker error:', err.message);
  }
}

module.exports = { startLoggerWorker };
